local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "1 Hz ┃ Click to Build Simulator",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Loading...",
    LoadingSubtitle = "by 1 Hz",
    Theme = "Dark Blue", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "by 1 Hz"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "YERMQTRRmQ", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "1 Hz ┃ Click to Build Simulator",
       Subtitle = "Key System",
       Note = "Join Discord For Get Key!", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"ILOVE_1Hz"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })
 Rayfield:Notify({
    Title = "1 Hz ┃ Click to Build Simulator",
    Content = "by 1 Hz",
    Duration = 6.5,
    Image = "check",
 })

local Tab1 = Window:CreateTab("Main", "circle-play")
local Tab2 = Window:CreateTab("Spin", "rewind")
local Tab3 = Window:CreateTab("Egg", "egg")
local Tab4 = Window:CreateTab("Build", "wrench")

 local EggHandler = {}
local houseList = {
   "Starter Shack",
   "Tiny House",
   "Wizard Shack",
   "Blacksmith",
   "Stone House",
   "Tall House",
   "Cute House",
   "Modern House",
   "High Tech House",
   "Modern Mansion"
}
local function NumberHandler(str)
    return str:gsub("Starter Shack","1"):gsub("Tiny House","2"):gsub("Wizard Shack","3"):gsub("Blacksmith","4"):gsub("Stone House","5"):gsub("Tall House","6"):gsub("Cute House","7"):gsub("Modern House","8"):gsub("High Tech House","9"):gsub("Modern Mansion","10")
 end
 local workspace = game:GetService("Workspace")
local Toggle = Tab1:CreateToggle({
    Name = "Auto Click",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.Build = Value
        while wait() do
          if _G.Build == false then break end
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
          game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["ClickService"]["RF"]["Click"]:InvokeServer()
        end    
    end,
 })

 local Toggle = Tab1:CreateToggle({
    Name = "Auto Collect Dirt",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.d = Value
        while wait() do
          if _G.d == false then break end
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["PlotService"]["RE"]["DestroyedBlock"]:FireServer("Dirt")
        end    
    end,
 })

 local Toggle = Tab1:CreateToggle({
    Name = "Auto Claim Reward",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.cr = Value
        while wait() do
          if _G.cr == false then break end
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(1)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(2)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(3)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(4)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(5)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(6)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(7)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(8)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(9)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(10)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(11)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RewardService"]["RF"]["Claim"]:InvokeServer(12)
        end   
    end,
 })

 local Toggle = Tab1:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.rb = Value
        while wait() do
          if _G.rb == false then break end
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["RebirthService"]["RF"]["SimpleRebirth"]:InvokeServer()
        end 
    end,
 })

 local Button = Tab1:CreateButton({
    Name = "End Tutorial",
    Callback = function()
        game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["TutorialService"]["RF"]["TutorialCompleted"]:InvokeServer()
    end,
 })

 local Dropdown = Tab2:CreateDropdown({
    Name = "Select spin",
    Options = {"Normal","Epic"},
    CurrentOption = {"Normal"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G._spin_type = Value
    end,
 })

 local Toggle = Tab2:CreateToggle({
    Name = "Auto Spin",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.as = Value
        while wait() do
          if _G.as == false then break end
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["SpinService"]["RF"]["Spin"]:InvokeServer(_G._spin_type,false)
        end
    end,
 })

 local Dropdown = Tab3:CreateDropdown({
    Name = "Select egg",
    Options = EggHandler,
    CurrentOption = EggHandler[1],
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G._egg_type = Value
    end,
 })

 local Toggle = Tab3:CreateToggle({
    Name = "Auto Hatch",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.ah = Value
        while wait() do
          if _G.ah == false then break end
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["EggOpeningService"]["RF"]["Hatch"]:InvokeServer("Single",_G._egg_type)
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["EggOpeningService"]["RF"]["Skipped"]:InvokeServer()
        end
    end,
 })

 local Dropdown = Tab4:CreateDropdown({
    Name = "Select building",
    Options = houseList,
    CurrentOption = houseList[1],
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G._build_type = NumberHandler(Value)
    end,
 })

 local Button = Tab4:CreateButton({
    Name = "Buy Building",
    Callback = function()
        game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["PlotService"]["RF"]["BuyBlueprint"]:InvokeServer(tonumber(_G._build_type))	
    end,
 })

 local Toggle = Tab4:CreateToggle({
    Name = "Auto Sell Building",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.sb = Value
        while wait() do
          if _G.sb == false then break end
            game:GetService("ReplicatedStorage")["Packages"]["Knit"]["Services"]["PlotService"]["RF"]["SellBuild"]:InvokeServer()
        end
    end,
 })


 local misc = Window:CreateTab("Misc", "settings-2")
 local Toggle = Tab4:CreateToggle({
    Name = "AntiAFK",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        _G.sb = Value
        while wait() do
          if _G.sb == false then break end
          function AntiAFK()
            spawn(function()
                while antiAFKEnabled do
                    local character = player.Character or player.CharacterAdded:Wait()
                    local hrp = character:FindFirstChild("HumanoidRootPart")
         
                    if hrp then
                        -- Simulate movement to avoid AFK detection
                        hrp.CFrame = hrp.CFrame * CFrame.new(0, 0, math.random(-1, 1))
                    end
                    wait(2) -- Move every 2 seconds
                end
            end)
        end
        end
    end,
 })
 local Button = misc:CreateButton({
    Name = "Rejoin",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer
        ts:Teleport(game.PlaceId, p)    
    end,
 })
local cred = Window:CreateTab("Credits", "cross")
local dis = cred:CreateLabel("Join My discord For More Info!")
local Button = cred:CreateButton({
    Name = "Copy Discord Link",
    Callback = function()
        setclipboard("https://discord.com/YERMQTRRmQ")
    end,
 })
